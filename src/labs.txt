----------------------------------------------------------------------
h1. Top-down

h2. Goals

* Understand how code can be used in a real application

h2. Here is the structure of a class

File: user.py
import datetime # this is how we import methods / functions from other places

# Here is a class
class User:
  def __init__(self, name, lastname, password, birthday, address, telephone, hobbies, email):
    self.name = name
    self.lastname = lastname
    self.password = password
    self.birthday = birthday
    self.address = address
    self.telephone = telephone
    self.hobbies = hobbies
    self.email = email

  def get_age(self):
    # Get today's date
    today = datetime.datetime.today()
    age = today.year - self.birthday.year

    return age

  def change_password(self, new_password):
    if len(new_password) < 6:
      raise ValueError('New password cannot contain less than 6 characters')

    self.password  = new_password

  def add_hobby(self, hobby):
    self.hobbies.append(hobby)

# Here is how to "instantiate" a class

bob = User(
  "bob",
  "jones",
  "supersecretpassword",
  datetime.date(1992, 3, 12),
  "450 SW Marine Drive",
  "604 123 4567",
  ["basketball", "baking"],
  "bob.jones@gmail.com"
)

print("Bob's age:", bob.get_age())
print("Bob's original password", bob.password)
bob.change_password("newpassword")
print("Bob's new password", bob.password)
EOF

Execute:
python user.py
=user_out

Output: 
=user_out
EOF

h2. Coding Exercises

1. Copy and paste the code above into a file within @lectures@ called @python101_lab_01_top_down.py@

2. Add a new hobby to bo

3. Create another person by instantiating a new object using the User class

4. Raise a Value error if the length of the password is greater than or equal to 12

----------------------------------------------------------------------
h1. Variables

h2. Goals

* Start creating your own variables
* Understand what variables are

h2. A variable is a value that can change

Try to predict what lucy would be on each print

File: variables.py
lucy = 10 + 2 - 1
print("lucy variable value:", lucy)
lucy = 13 + 2 - 1
print("lucy variable value:", lucy)
EOF

Execute:
python variables.py
=var_out

Output:
=var_out
EOF


h2. Python has untyped variables

* In python, variables can be of ANY type and you don't have to declare it.

p. This is what it looks like in C / C++, where you have to declare the type of variable

File: typed_variables.h
int lucy = 1;
string colm = "Hello";
float morsal = 3.705;
EOF

p. This is what it looks like in python

File: untyped_variables.py
lucy = 1
colm = "Hello"
morsal = 3.705
EOF

h2. Unlike normal math equations, the "conclusion" is on the left side

p. In math we do something like @1 + 2 + 3 = answer@ in programming however, we set the answer to the equation. @answer = 1 + 2 + 3@ The lefthand side almost always contains only one word.

h2. Name of the variable does not matter

p. A common mistake people often make is thinking that the name of the variable matters. it does not.

File: name_does_not_matter.py
harry = 1.385
one = "Harry"
EOF

p. Run this file and you will see that it won't throw any errors

Execute:
python name_does_not_matter.py
=name_does_not

Output:
=name_does_not
EOF

p. Another common mistake people make is thinking that there has to be quotation marks to variables. Variables never have quotation marks. They aren't strings! Their value could be strings, but they are not.

File: quotation_marks_around_vars.py
"one" = "Harry"
EOF

Execute:
python quotation_marks_around_vars.py
=out

Output:
=out
EOF

h2. Advanced: Return multiple values in python.

p. Python is quite unique in that you can make two variables equal to two statements. An example of this would be a function that returns two values.

File: return_two_values.py
def fn_return_two():
  return "a", "b"

str_1, str_2 = fn_return_two()

print("This is the first value returned", str_1)
print("This is the second value returned", str_2)
EOF

Execute:
python return_two_values.py
=ret_out

Output:
=ret_out
EOF

h2. Coding Exercises

p. Remember to add, commit, and push the file to your own forked repo!

1. Create a file called @python101_lab_02_variables.py@

2. Create variables for your first name, last name, your school, your favorite number, and your favorite color!

3. Return the string "42" by adding TWO strings together. Do not just give @forty_two = "42"@

4. Return the integer value 5 by using addition, subtraction, and division


----------------------------------------------------------------------
h1. Data types and Data Structures

h2. Goals

* Learn primitive / basic data types
* Learn non-primitive / composite data structures

h2. Primitive types

<table>
  <tr>
    <th>Symbol</th>
    <th>Example</th> 
  </tr>
  <tr>
    <td>str</td>
    <td>'Hello' or "Hello"</td>
  </tr>
  <tr>
    <td>int</td>
    <td>0,1,2,3,4</td>
  </tr>
  <tr>
    <td>float</td>
    <td>0.123, 0.456</td>
  </tr>
  <tr>
    <td>bool</td>
    <td>false</td>
  </tr>
</table>

h2. Non-primitive / Composite Data Structures

<table>
  <tr>
    <th>Symbol</th>
    <th>Example</th> 
    <th>Notes</th>
  </tr>
  <tr>
    <td>list</td>
    <td>['kevin', 'kevin', 'tim', 'david']</td> 
    <td>can have duplicates, ordered by insertion</td>
  </tr>
  <tr>
    <td>set</td>
    <td>{'kevin', 'david', 'tim'}</td> 
    <td>no duplicates, unordered by insertion</td>
  </tr>
  <tr>
    <td>dict</td>
    <td>{'kevin': 25, 'david': 26, 'tim': 29} </td> 
    <td>key-value pair. no duplicates. unordered by insertion</td>
  </tr>
</table>

p. What does ordered by insertion mean? It means that you can expect that the data structure will retain the same elements in order of insertion.

h2. Written Questions

1. You have a grocery store. Which composite data structure is best to store items and their respective prices?

2. You want to get all the unique words in an essay. What composite data structure is best for this?

3. You run a fast-food restaurant. What data structure is best to use to store all the orders coming in?

4.  How much money does sam have?

File: written_q.py

bank = {
  'sam': 500
}

bank['sam']['money'] == 200
EOF

5.  How much money does sam have?

File: written_q.py

bank = {
  'sam': 500
}

bank['sam']['money'] = 200
EOF



h2. Coding Exercises

1. Create a file within lectures called @python101_lab_03_data_types_and_structures.py@

2. Let's create the grocery store price list. The list of ingredients and their respective prices are

* grapes 4.99
* apples 2.00
* tomato soup 3.00

3. To test it out, run your file by running

Execute:
python python101_lab_01_data_types_and_structures.py

4. You'll notice that there is no output. Print out your grocery list by adding an additional line to print out the price list data structure you made. Google "how do I print something in python?"

5. Test your file out by running it again. You should see the dictionary you created

6. Grapes are being discontinued from your grocery store. Write another line of code that will remove it from your price list


----------------------------------------------------------------------

h1. Operators

h2. Goals

* Understand arithmetic, relational, and logical operators

h2. Arithmetic operators

<table>
  <tr>
    <th>Symbol</th>
    <th>Task Performed</th> 
    <th>Example</th>
    <th>Output</th>
  </tr>
  <tr>
    <td>+</td>
    <td>Addition</td> 
    <td>1 + 1</td>
    <td>2</td>
  </tr>
  <tr>
    <td>-</td>
    <td>Subtraction</td> 
    <td>1 - 1</td>
    <td>0</td>
  </tr>
  <tr>
    <td>/</td>
    <td>Division</td> 
    <td>1 / 2</td>
    <td>0.5</td>
  </tr>
  <tr>
    <td>*</td>
    <td>Multiplication</td> 
    <td>1 * 2</td>
    <td>2</td>
  </tr>
  <tr>
    <td>//</td>
    <td>Floor division (round down to an int)</td> 
    <td>1 / 2</td>
    <td>0</td>
  </tr>
  <tr>
    <td>**</td>
    <td>To the power of</td> 
    <td>2**2</td>
    <td>4</td>
  </tr>
</table>

h2. Relational operators

<table>
  <tr>
    <th>Symbol</th>
    <th>Task Performed</th> 
    <th>Example</th>
    <th>Output</th>
  </tr>
  <tr>
    <td>==</td>
    <td>True if it is equal</td> 
    <td>1 == 1</td>
    <td>True</td>
  </tr>
  <tr>
    <td>!=</td>
    <td>True if not equal to</td> 
    <td>1 != 1</td>
    <td>False</td>
  </tr>
  <tr>
    <td><</td>
    <td>Less than</td> 
    <td>1 < 1</td>
    <td>False</td>
  </tr>
  <tr>
    <td>*</td>
    <td>Greater than</td> 
    <td>1 > 1</td>
    <td>False</td>
  </tr>
  <tr>
    <td><=</td>
    <td>Less than or equal to</td> 
    <td>1 <= 1</td>
    <td>True</td>
  </tr>
  <tr>
    <td>>=</td>
    <td>Greater than or equal to </td> 
    <td>1>=1</td>
    <td>True</td>
  </tr>
</table>

h2. Logical operators

<table>
  <tr>
    <th>Symbol</th>
    <th>Task Performed</th> 
    <th>Example</th>
    <th>Output</th>
  </tr>
  <tr>
    <td>and</td>
    <td>True, if both are true  </td> 
    <td>(1 == 1) and (2 == 3)</td>
    <td>False. One is false.</td>
  </tr>
  <tr>
    <td>or</td>
    <td>True, if one is true</td> 
    <td>(1 == 2) or (2 == 3)</td>
    <td>False. Neither are true.</td>
  </tr>
  <tr>
    <td>not</td>
    <td>True, if one is false</td> 
    <td>(1 == 2)</td>
    <td>True. It is not true</td>
  </tr>
</table>

h2. Written Exercises

1. What is the result of @true == true@?

2. What is the result of @false == true@?

3. What is the result of @true and true@?

4. What is the result of @true and false@?

5. What is the result of @3 == 3 and 4 == 4@?

6. What is the result of @3 == 2 and 4 == 4@?

7. What is the difference @between = and ==@?

8. What is the difference between @and@ and @or@? Give an example that shows the difference

----------------------------------------------------------------------
h1. Quiz 00

1. Start quiz

<h3><b>Execute:</b></h3>
<pre class="instructions">cd ~/Development/polyglot/cohort-1/quizzes</pre>
<pre class="instructions">jupyter notebook</pre>


2. Open up @python101_quiz_00_data_types_and_structures.ipynb@ and begin

----------------------------------------------------------------------